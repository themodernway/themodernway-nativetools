/*
 * Copyright (c) 2017, The Modern Way. All rights reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
    repositories {
        mavenCentral()
        maven { url 'http://repo.spring.io/plugins-release' }
    }
    dependencies {
        classpath(group: 'org.ajoberstar', name: 'grgit', version: '1.7.2')
        classpath(group: 'commons-codec', name: 'commons-codec', version: '1.10')
        classpath(group: 'commons-logging', name: 'commons-logging', version: '1.2')
        classpath(group: 'org.apache.httpcomponents', name: 'httpclient', version: '4.5.2')
        classpath(group: 'org.fusesource.jansi', name: 'jansi', version: '1.11')
        classpath(group: 'org.codehaus.groovy', name: 'groovy-all', version: '2.4.8', classifier: 'indy')
        classpath(group: 'org.springframework.build.gradle', name: 'propdeps-plugin', version: '0.0.7')
    }
}

import org.apache.tools.ant.filters.FixCrLfFilter
import org.apache.tools.ant.filters.ReplaceTokens
import java.net.InetAddress
import org.ajoberstar.grgit.Grgit

apply plugin: 'maven'
apply plugin: 'groovy'
apply plugin: 'jacoco'
apply plugin: 'signing'
apply plugin: 'eclipse'
apply plugin: 'propdeps'
apply plugin: 'propdeps-maven'
apply plugin: 'propdeps-eclipse'

compileJava.options.encoding = 'UTF-8'

version = '1.0.0-SNAPSHOT'

group = 'com.themodernway'

eclipse {
    classpath {
        downloadJavadoc = true
        downloadSources = true
    }
}

task doJavaDocs(type: Groovydoc) {
    source = sourceSets.main.allSource
    classpath = sourceSets.main.runtimeClasspath + buildscript.configurations.classpath
    destinationDir = file("${buildDir}/docs/javadoc")
    includes = ['com/themodernway/nativetools/**']
    docTitle = "TheModernWay NativeTools"
    footer = "<small><a href=\"${getBuildGITHomeURL()}\" target=\"_blank\">${getProjectCommonName()} - &copy; 2017, - ${getBuildModuleVersion()} - Author: Dean S. Jones</a></small>"
    getGroovydocLinks().each { name, list ->
        link(name, *list)
    }
}

task sourcesJar(type: Jar, dependsOn: classes) {
    classifier = 'sources'
    from sourceSets.main.allSource
}

task javadocJar(type: Jar, dependsOn: doJavaDocs) {
    classifier = 'javadoc'
    from javadoc.destinationDir
}

compileJava.dependsOn(clean)

jar {
    manifest {
        attributes 'Implementation-Title': getProjectTitle(), 'Implementation-Version': getBuildModuleVersion()
    }
    from sourceSets.main.allSource
}

def getFilterTokens() {
    [GRADLE_BUILD_ARTIFACT_ID: getProjectArtifactID(), GRADLE_BUILD_PROJECT_TITLE: getProjectTitle(), GRADLE_BUILD_USER: getBuildUser(), GRADLE_BUILD_DATE: getBuildDate(), GRADLE_JAVA_VERSION: getJavaVersion(), GRADLE_GIT_COMMIT_HASH: getBuildGITCommitHash(), GRADLE_GIT_COMMIT_USER: getBuildGITCommitUser(), GRADLE_GIT_COMMIT_MESSAGE: getBuildGITCommitMessage(), GRADLE_BUILD_SERVER_HOST: getBuildServerHost(), GRADLE_BUILD_SERVER_BUILD: getBuildServerBuild(), GRADLE_BUILD_MODULE_VERSION: getBuildModuleVersion()]
}

def String getProjectArtifactID() {
    getProjectTitle().toLowerCase()
}

def String getProjectTitle() {
    getProjectCommonName().replaceAll(' ', '-')
}

def String getProjectCommonName() {
    'TheModernWay NativeTools'
}

def getBuildModuleVersion() {
    version
}

def getBuildDate() {
    (new Date()).toString()
}

def getBuildServerHost() {
    try {
        InetAddress.getLocalHost().getHostName()
    }
    catch (Exception e) {
        "localhost"
    }
}

def getJavaVersion() {
    System.getProperty('java.version') ?: 'unknown'
}

def getBuildUser() {
    System.getProperty('user.name') ?: 'unknown'
}

def getBuildServerBuild() {
    System.getenv('BUILD_DISPLAY_NAME') ?: 'Command line ' + GradleVersion.current().toString()
}

def getBuildGITHomeURL() {
    'https://github.com/themodernway/' + getProjectArtifactID()
}

def getBuildGITCommitHash() {
    getBuildGITHomeURL() + '/commit/' + Grgit.open(project.file('.')).head().id
}

def getBuildGITCommitUser() {
    Grgit.open(project.file('.')).head().committer.email
}

def getBuildGITCommitMessage() {
    Grgit.open(project.file('.')).head().shortMessage
}

repositories {
    mavenCentral()
    maven {
        url "${sonatype_snapshotURL}"
    }
}

sourceSets {
    main {
        resources {
            srcDir 'src/main/java'
        }
    }
}

dependencies {
    compile(group: 'com.themodernway', name: 'themodernway-common', version: '1.0.0-RELEASE')
    provided(group: 'com.google.gwt', name: 'gwt-user', version: '2.8.0')
}

artifacts {
    archives sourcesJar
    archives javadocJar
    archives jar
}

signing {
    sign configurations.archives
}

uploadArchives {
    repositories {
        mavenDeployer {
            beforeDeployment { MavenDeployment deployment -> signing.signPom(deployment) }
            //repository(url: "${sonatype_stageingURL}") {
            repository(url: "${sonatype_snapshotURL}") {
                authentication(userName: "${sonatype_user_tmw}", password: "${sonatype_password_tmw}")
            }
            pom.project {
                name 'TheModernWay-NativeTools'
                packaging 'jar'
                description 'TheModernWay NativeTools - GWT high speed native collection, browser access, and JSON utilities.'
                url 'https://github.com/themodernway/themodernway-nativetools'
                scm {
                    url 'scm:git@github.com:themodernway/themodernway-nativetools.git'
                    connection 'scm:git@github.com:themodernway/themodernway-nativetools.git'
                    developerConnection 'scm:git@github.com:themodernway/themodernway-nativetools.git'
                }
                licenses {
                    license {
                        name 'The Apache Software License, Version 2.0'
                        url 'http://www.apache.org/licenses/LICENSE-2.0.txt'
                        distribution 'repo'
                    }
                }
                developers {
                    developer {
                        id 'sprocketnyc'
                        name 'Dean S. Jones'
                        email 'deansjones@gmail.com'
                        url 'https://www.lienzo-core.com'
                    }
                }
            }
        }
    }
}

def Map<String, List<String>> getGroovydocLinks() {
    def lmap = [:]
    File data = file('groovydoc/GROOVYDOC_LINK_LISTS.txt')
    if (data.exists()) {
        data.eachLine { line ->
            def vals = ((CharSequence) line).tokenize(',')
            lmap[vals.head()] = vals.tail()
        }
    }
    lmap
}

task(buildGroovydocLinks) << {
    def site = [:]
    File data = file('groovydoc/GROOVYDOC_LINK_SITES.txt')
    if (data.exists()) {
        data.eachLine { line ->
            site[line] = ((CharSequence) new URL("${line}/package-list").text).tokenize('\n')
        }
    }
    File make = file('groovydoc/GROOVYDOC_LINK_LISTS.txt')
    if(make.exists()) {
        make.delete()
    }
    make.createNewFile()
    def save = make.newPrintWriter()
    site.each { link, list ->
        def show = "${link}"
        list.each { line ->
            show = "${show},${line}"
        }
        save.println("${show}")
    }
    save.flush()
    save.close()
}